<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="3.8.3">Jekyll</generator><link href="https://andrewmontoyaiv.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://andrewmontoyaiv.com/" rel="alternate" type="text/html" hreflang="en" /><updated>2018-07-15T00:42:37-05:00</updated><id>https://andrewmontoyaiv.com/</id><title type="html">Andrew Montoya IV</title><subtitle>Hydejack is Jekyll theme with JavaScript powers. It has been called the &quot;Best [Jekyll] Theme by a Mile&quot;. Hundreds of hackers and scientists use it for their personal sites. Open `_config.yml` to edit this text.
</subtitle><author><name>Andrew Montoya</name><email>andrewmontoyaiv@gmail.com</email></author><entry><title type="html">Using Animation Notifies in UE4</title><link href="https://andrewmontoyaiv.com/blog/game-design/Using-Animation-Notifies-in-UE4/" rel="alternate" type="text/html" title="Using Animation Notifies in UE4" /><published>2017-12-13T00:00:00-06:00</published><updated>2017-12-13T00:00:00-06:00</updated><id>https://andrewmontoyaiv.com/blog/game-design/Using-Animation-Notifies-in-UE4</id><content type="html" xml:base="https://andrewmontoyaiv.com/blog/game-design/Using-Animation-Notifies-in-UE4/">&lt;p&gt;I recommend anyone interested in using event/animation notifies to check out Unreal’s documentation first. It goes over why you should take advantage of it, and some examples of use cases. It is mentioned in passing that notifies can be defined and used directly in the ASM (Animation State Machine), and I will show you how to do just that.&lt;/p&gt;

&lt;p&gt;ASM&lt;/p&gt;

&lt;p&gt;Using an Animation State Machine allows you to separate animation into states, and define parameters for when a skeletal mesh should enter these states. Knowing that you could use event notifies directly in the ASM can seem odd since you could just as simply define an anim notify in an animaton file itself. But if you only want an event to trigger once during a state (for example when entering an idle animation), then you should consider notifies in the ASM directly.&lt;/p&gt;

&lt;p&gt;If not done already, create an animation blueprint for your character (In my case, I will be using the animation blueprint that is included with the 3rd person template).&lt;/p&gt;

&lt;p&gt;creatingABP&lt;/p&gt;

&lt;p&gt;In the state machine select either a state or transition and locate the details panel. Scroll down and you will see either a dropdown for notifications (if a transition is selected), or a dropdown for animation states (if a state is selected). Here is where we will define our custom notification.&lt;/p&gt;

&lt;p&gt;LocationOfNotification2&lt;/p&gt;

&lt;p&gt;In my example, I have a blendspace called AimingWalk that is played in the idle state, but I also want the blend space to run during the jump animation. To implement this, type the name of your custom event in the end transition event dialog box (using the transition into idle node).&lt;/p&gt;

&lt;p&gt;typingNotify&lt;/p&gt;

&lt;p&gt;In the event graph, RMB click and type in the name of the defined custom event. A new node should appear, and with this you can start binding the custom event. Whenever this is reached in the State Machine during runtime, the notify will trigger and your event will be called.&lt;/p&gt;

&lt;p&gt;EventNode&lt;/p&gt;

&lt;p&gt;With this, you can further explore animation notifies. In my example, I am toggling a bool whenever I start/stop jumping.&lt;/p&gt;

&lt;p&gt;2 gif with and without notify&lt;/p&gt;

&lt;p&gt;And as you can see, my aiming animation seamlessly blends between walking/jumping&lt;/p&gt;</content><author><name>Andrew Montoya</name><email>andrewmontoyaiv@gmail.com</email></author><category term="game-design" /><category term="UE4" /><summary type="html">I recommend anyone interested in using event/animation notifies to check out Unreal’s documentation first. It goes over why you should take advantage of it, and some examples of use cases. It is mentioned in passing that notifies can be defined and used directly in the ASM (Animation State Machine), and I will show you how to do just that.</summary></entry><entry><title type="html">First Person Animations for UE4</title><link href="https://andrewmontoyaiv.com/blog/game-design/First-Person-Animations-for-UE4/" rel="alternate" type="text/html" title="First Person Animations for UE4" /><published>2017-11-28T00:00:00-06:00</published><updated>2017-11-28T00:00:00-06:00</updated><id>https://andrewmontoyaiv.com/blog/game-design/First-Person-Animations-for-UE4</id><content type="html" xml:base="https://andrewmontoyaiv.com/blog/game-design/First-Person-Animations-for-UE4/">&lt;p&gt;Animation is a powerful medium that can bring our fantasies to life. Animation in video games especially can be used to strengthen storylines or give necessary visual feedback to the player. Spending just a bit of time on custom animation can be that extra factor that gives your game added personality and uniqueness.&lt;/p&gt;

&lt;p&gt;In this tutorial, I will be showing you how to create 1st person animations for your Unreal games. Although techniques I bring up can apply to any game engine, we will be using tools that target the Unreal Engine.&lt;/p&gt;

&lt;div class=&quot;yt-container&quot;&gt;
  &lt;iframe class=&quot;embed-responsive-item&quot; width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/XoA0gLFQ2Gw&quot; frameborder=&quot;0&quot;&gt;
  &lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;getting-ready&quot;&gt;Getting Ready&lt;/h1&gt;

&lt;p&gt;Before getting started, let’s make our life easier and download some plugins that will speed up our workflow. Unreal supplies us with the Animation and Rigging toolkit (ART) – which as the name implies, is great for rigging and animating our characters – for free, but it’s a bit tricky to set up. After downloading the plugin (via the Unreal marketplace), you have the option to install it to an engine (doesn’t matter which, but note the version). Navigate to the file: userSetup.py (In my case, it is under: D:\Programs\EpicGames\Engine\UE_4.15\Engine\Plugins\Marketplace\ARTv1\MayaTools). We need to point Maya to this plugin and we do this by copying this file and pasting it into the Maya plugins folder (Documents\Maya\Plugins).&lt;/p&gt;

&lt;p&gt;Upon opening Maya, it will ask you to locate the original userSetup.py file. Do that and the ART plugin will now appear on the menu bar. Click the “Add a Character for Animation” option under the ART tool dropdown, and select mannequin. Import it to your scene and the standard Unreal character model should now be loaded in. The rig itself is quite complex, it’s really worth it to take a look at the model’s control system before continuing.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/First-Person-Animations-for-UE4/1.png&quot; alt=&quot;Original photo&quot; class=&quot;lead&quot; width=&quot;1920&quot; height=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;setting-up-our-rig&quot;&gt;Setting Up Our Rig&lt;/h2&gt;

&lt;p&gt;Let’s get our model ready for animation! If you noticed, there was no option to import a first person Unreal model, so we have to make some modifications. Create a camera and resize it to your liking. In the end, we want to replace the head with our camera. Select the head and hide it by hitting Ctrl-H. Next, we need to parent the camera to the head joint. Joints are hidden on our mesh by default, so navigate to the outliner and select the head joint &amp;amp; go to Display-&amp;gt;Show-&amp;gt;Show Selected.&lt;/p&gt;

&lt;p&gt;We have several options for snapping objects together, but I really recommend downloading the animSnap plugin. It’s a great animation tool for constraining objects together. After installing the plugin, type animSnap on the command line to bring it up.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/First-Person-Animations-for-UE4/2.png&quot; alt=&quot;200x400&quot; class=&quot;lead&quot; width=&quot;1920&quot; height=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the tool, assign the head joint to the master and the camera to the slave. Click on the magnifier icon next to the snap button to snap the objects together (You may need to rotate the camera after to correct the setup). To finish this part up, parent the camera to the joint using the P shortcut.&lt;/p&gt;

&lt;p&gt;Maya’s default camera does no match with Unreal’s camera system automatically, so go into the cameras attributes and change its focal length to 21.5.  Finally, open up the camera in a new viewport and turn on its film gate. We are now ready to animate!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/First-Person-Animations-for-UE4/3.png&quot; alt=&quot;Original photo&quot; class=&quot;lead&quot; width=&quot;1920&quot; height=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;animation&quot;&gt;Animation&lt;/h1&gt;

&lt;p&gt;Keep in mind that there are many approaches to animation. I’m going to explain my (still developing) style and some tips I picked up along the way, but don’t feel like you need to follow this. Go with what works for you!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/4SJAIzm.gif&quot; alt=&quot;Sword Swing&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;idle-pose-to-pose-technique&quot;&gt;Idle (pose to pose technique)&lt;/h2&gt;

&lt;p&gt;Lets start out with an idle animation. Begin by defining the start/end pose. This pose will be the midpoint for our motion so there shouldn’t be too much rotation. However, the pose should be readable, meaning you should be able to tell our character is idling, even though there is no animation present (yet). Consider specifically posing the hands as this is a great part of the model for adding that readability! When you’re finished, copy and paste this key to around frame 24 (Idle will last for around 1 second, or change as you see fit for timing). It’s also important to note that it doesn’t largely matter the frames per second you are animating to. Unreal will do the interpolating for us and upscale/downscale our animations.&lt;/p&gt;

&lt;p&gt;Next, lets focus on some other key poses. Find the midpoint of the animation and set keys. We will set our extreme poses between these 3 keys (don’t animate the non-dominant hand as we are going to use animSnap to constrain this hand to the weapon).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/First-Person-Animations-for-UE4/4.png&quot; alt=&quot;Original photo&quot; class=&quot;lead&quot; width=&quot;1920&quot; height=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And again, these poses should be readable, but don’t add too much motion as it could be distracting to the player. Remember to animate to the player camera! Just because it looks good in perspective view doesn’t mean it will look right to the player. Tip: if you want both viewports to update animation, go to Preferences-&amp;gt;Time Slider-&amp;gt;Update View Active All.&lt;/p&gt;

&lt;p&gt;Another tip: Instead of changing the values of a key to make changes, sample the frames that come before it, select a pose that works best, and MMB+drag + S to the key that you want to replace.
Note the arc that you want your weapon to follow. Life doesn’t move in a straight line, so to add more expressive &amp;amp; natural movement, you might want to consider animating to an arc or a figure 8. Again, depending on your requirements, you might want to tone down/ramp up the overall movement of your animation. When animating, a little goes a long way.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/PgAqIR6.gif&quot; alt=&quot;Idle Sword&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that we have our base loop, let go ahead and refine it. Select all of our characters controls and move the keys several frames forward. Copy the keys and align the new start key to take over the original’s end key. Do this one more time to have our idle animation loop for a total of 3 times (You can also get the same results by selecting all your curves in the graph editor and hitting Curves&amp;gt;PreInfinity/PostInfinity-&amp;gt;Cycle  - If you don’t see the new curves, go to View-&amp;gt;Show Results). This is useful for seeing and modifying how your idle animation transitions between loops (as well as offsetting your animations). Now go ahead and move keys around to get something that you’re happy with! If the non-dominant hand is moving off of the weapon, go ahead an animsnap it back to its correct position.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/First-Person-Animations-for-UE4/5.png&quot; alt=&quot;Original photo&quot; class=&quot;lead&quot; width=&quot;1920&quot; height=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When refining, make sure objects feel like it has weight. Add counter movement to dampen larger movements (such as a forearm moving the opposite direction of the upper arm for a few frames), and add secondary animation.&lt;/p&gt;

&lt;p&gt;Note: when using the first method, if you make changes to one curve, make sure you edit the corresponding sections of the other 2 curves. This makes sure what you animate will reflect the final export.&lt;/p&gt;

&lt;p&gt;You’ve just finished the idle animation! This animation will be the base for all the others that we will create.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/DGXX1nQ.gif&quot; alt=&quot;Idle Sword Preview&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;attack-straight-ahead-technique&quot;&gt;Attack (straight ahead technique)&lt;/h2&gt;

&lt;p&gt;With the attack animation, we will use most of the techniques discussed in the previous section. However, since we are not animating a seamless loop, we will not focus on timing in the blockout phase. Save our idle animation as a new file and rename it to attack_anim. Delete all keys except for the beginning pose. Now, using one frame at a time, start to pose out our character. Again, the poses should be readable and strong. It is here you should add the secondary motion/counter movement. The goal here is to add the absolute minimum amount of frames necessary in order to, “sell,” your story.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/First-Person-Animations-for-UE4/6.png&quot; alt=&quot;Original photo&quot; class=&quot;lead&quot; width=&quot;1920&quot; height=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For the timing phase, start spreading out keyframes as you see fit. Make the animation feel like there is weight (as well as making sure our anims have time to breathe). If you want an action to happen quickly, add some anticipation. This is where you should be working out the, “feel,” of the animation.
For refining, continue feeling out your animation and spreading out keyframes. Accentuate your poses and make your curves tell a story. Refine/reanimate until you are happy with the result.
We now have some animations to play around with in unreal! It’s now time to export.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/First-Person-Animations-for-UE4/7.png&quot; alt=&quot;Original photo&quot; class=&quot;lead&quot; width=&quot;1920&quot; height=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;exporting&quot;&gt;Exporting&lt;/h1&gt;
&lt;p&gt;Depending on your needs, you may want to make sure the export maintains the offset you have meticulously set up for your weapon. This next part is not necessary (if you don’t mind fiddling with rotating/moving the weapon in Unreal), but if you want the Unreal setup to match exactly the way it currently is in Maya, don’t skip to Final Export.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-for-export&quot;&gt;Setting Up for Export&lt;/h2&gt;

&lt;p&gt;When we export animation using ART, it is processing from 2 files:  Animation rig files and export files (both found in the projects folder from within the plugin). We have to use both of these to make sure our export includes the offset for our weapon (make a backup of these files so we can revert our changes after exporting).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/First-Person-Animations-for-UE4/8.png&quot; alt=&quot;Original photo&quot; class=&quot;lead&quot; width=&quot;1920&quot; height=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Back in our scene, create 2 locators and parent them to one another. Assign the parent locator to the wrist control (with animSnap) and its child to the weapon. Copy/export (as a maya binary) only the locators and then open up the mannequin rig file (should be under AnimRigs/mannequin.mb). paste it in this file and, using animSnap, snap the parent locator to the wrist control. Create another locator and snap it to the child of the imported locator hierarchy. Now, export/copy only the created locator. Don’t save, but just in case you did, remember you can replace the file with our backup. Open the mannequin_export.mb file and bring in the single locator you just made. Using the outliner, locate ik_hand (with suffix _r _l depending on which hand you were animating to). Snap this joint to our imported locator. Then, remove unneeded parent constraints (remove ik_hand_r_gun). Remember to not have any keyed frames in this file or it could cause problems with anim exports. We are now done! Delete the locator and save the file!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/First-Person-Animations-for-UE4/9.png&quot; alt=&quot;Original photo&quot; class=&quot;lead&quot; width=&quot;1920&quot; height=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;final-export&quot;&gt;Final Export&lt;/h2&gt;

&lt;p&gt;The final export is relatively simple. If not open already, go to ART and select the Animation Interface. Press the export from within the interface and you will see a new dialogue box pop up. Keep the settings as is and export as an FBX. Make sure you select the right start and end keyframes and export the animation!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/First-Person-Animations-for-UE4/10.png&quot; alt=&quot;Original photo&quot; class=&quot;lead&quot; width=&quot;1920&quot; height=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;porting-to-unreal&quot;&gt;Porting to Unreal&lt;/h1&gt;

&lt;p&gt;To test our new animations, start a new first person shooter project. Import our FBX files and make sure they are applied to the UE4 skeleton. Locate the current idle animation and left click-&amp;gt;replace with new source.&lt;/p&gt;

&lt;p&gt;To attach the weapon to our character, go into the character blueprint’s constructor and add the Attach to Component node:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/First-Person-Animations-for-UE4/11.png&quot; alt=&quot;Original photo&quot; class=&quot;lead&quot; width=&quot;1920&quot; height=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For our attack animation, we are going to use animation montages. Create a new input, attack, and output this to play a montage:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/First-Person-Animations-for-UE4/12.png&quot; alt=&quot;Original photo&quot; class=&quot;lead&quot; width=&quot;1920&quot; height=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And we’re done! Create some more animations and keep at it. Don’t be scared to go back and refine/reanimate your work. Most of what I have learned came from Gnomon Workshop tutorials, which I highly recommend if you want to expand your knowledge of the Unreal animation pipeline (or learn just about anything from environmental design to 3D printing). I recommend watching Creating First Person Shooter Animations for Games, which is an extended and in-depth tutorial of this article. Bill Buckley, the instructor for the tutorial series, gives many great tips and tricks for working between Maya and Unreal.&lt;/p&gt;

&lt;p&gt;And with that, see you guys later and have a great day everybody!&lt;/p&gt;</content><author><name>Andrew Montoya</name><email>andrewmontoyaiv@gmail.com</email></author><category term="game-design" /><category term="UE4" /><category term="Maya" /><summary type="html">Animation is a powerful medium that can bring our fantasies to life. Animation in video games especially can be used to strengthen storylines or give necessary visual feedback to the player. Spending just a bit of time on custom animation can be that extra factor that gives your game added personality and uniqueness.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://andrewmontoyaiv.com/assets/img/blog/First-Person-Animations-for-UE4/title.jpg" /></entry><entry><title type="html">Adding Mixamo Animations to Unreal Rigs</title><link href="https://andrewmontoyaiv.com/blog/game-design/Adding-Mixamo-Animations-to-Unreal-Rigs/" rel="alternate" type="text/html" title="Adding Mixamo Animations to Unreal Rigs" /><published>2017-11-14T00:00:00-06:00</published><updated>2017-11-14T00:00:00-06:00</updated><id>https://andrewmontoyaiv.com/blog/game-design/Adding-Mixamo-Animations-to-Unreal-Rigs</id><content type="html" xml:base="https://andrewmontoyaiv.com/blog/game-design/Adding-Mixamo-Animations-to-Unreal-Rigs/">&lt;p&gt;So you acquired some models from the unreal marketplace and want to spice it up with some animations. While the UE Marketplace has a nice collection of animation packs, I will show you how to use Mixamo (A currently free (as of 2017) rigging/animation toolkit) to import an already rigged character from Unreal and export animations provided by Mixamo.&lt;/p&gt;

&lt;p&gt;Start out by opening your project in Unreal and selecting a mesh that you wish to add animations to. In this case, I will be using the standard Unreal model. LMB over the desired asset and click Asset Actions-&amp;gt;Export. Make sure to select the mesh and not the skeleton or physics component as we want to export both the mesh and its skeleton.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/Adding-Mixamo-Animations-to-Unreal-Rigs/1.png&quot; alt=&quot;Original photo&quot; class=&quot;lead&quot; width=&quot;1920&quot; height=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Over in Mixamo, if you haven’t already, sign up for an account and you will be prompted to either upload a character or select from a premade one. Locate the file that we had exported and Mixamo will begin to process the file.&lt;/p&gt;

&lt;p&gt;Once done, you’re free to explore Mixamo’s library of animation. Pick something you like and use the sliders to make adjustments. When you’re happy with the animation, hit the download button. In the download settings, make sure to download without skin and leave all other options at their default.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/Adding-Mixamo-Animations-to-Unreal-Rigs/3.png&quot; alt=&quot;Original photo&quot; class=&quot;lead&quot; width=&quot;1920&quot; height=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we jump into this new asset in Unreal and show bones (show-&amp;gt;bone-&amp;gt;all heirarchy), we can see that the pelvis doesn’t move at all. This is happening because there is animation info on the root bone, and in Unreal, the rig moves in relation to the root. Mixamo doesn’t really export nicely with Unreal, so we need to do some tweaking.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/xQdi3K0.gif&quot; alt=&quot;Dancing Skeleton&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Open up Maya (Or your choice of 3D modeling software) and import your FBX file. If we play the animation here, the rig moves as intended. Except, we need to make sure the root bone doesn’t move for the duration of the anim.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/k1vm8qS.gif&quot; alt=&quot;Dancing Skeleton&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To do this, open up the outliner and select the locator (which should be at the top of the character’s hierarchy chain). The animation that we need to relocate is on this locator, so select the next bone in the hierarchy chain (in my case it is the root bone), and hit unparent (edit-&amp;gt;unparent). Playing the animation will now give us a similar result to what we saw in Unreal.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/Adding-Mixamo-Animations-to-Unreal-Rigs/4.jpg&quot; alt=&quot;Original photo&quot; class=&quot;lead&quot; width=&quot;1920&quot; height=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To get the desired result, first make sure you are on the rigging menu set, select the locator and then the pelvis, and go to constrain-&amp;gt;parent constraint. The animation will now behave like it did before our modifications, except animations are now moved off the root bone.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/Adding-Mixamo-Animations-to-Unreal-Rigs/5.jpg&quot; alt=&quot;Original photo&quot; class=&quot;lead&quot; width=&quot;1920&quot; height=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/lZz0QXC.gif&quot; alt=&quot;Dancing Skeleton Fixed&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select the rig and go to file-&amp;gt;export. export as an FBX and make sure animation and bake animation is selected. Ignore the warning that appears. We are now ready to upload to Unreal!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/Adding-Mixamo-Animations-to-Unreal-Rigs/6.jpg&quot; alt=&quot;Original photo&quot; class=&quot;lead&quot; width=&quot;1920&quot; height=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Over in Unreal, left click in an asset folder, and select import. select our fixed animation and make sure to specify what skeleton the animation will be applied to. Hit import and we are now done! Test it by dragging it into the world and see your models jump around.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/BJRmpKt.gif&quot; alt=&quot;Dancing Skeleton Fixed UE4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You now know how to use Mixamo with unreal characters without the need to re-target skeletons. Experiment with some more animations and add life to your projects.&lt;/p&gt;</content><author><name>Andrew Montoya</name><email>andrewmontoyaiv@gmail.com</email></author><category term="game-design" /><category term="Maya" /><category term="UE4" /><summary type="html">So you acquired some models from the unreal marketplace and want to spice it up with some animations. While the UE Marketplace has a nice collection of animation packs, I will show you how to use Mixamo (A currently free (as of 2017) rigging/animation toolkit) to import an already rigged character from Unreal and export animations provided by Mixamo.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://andrewmontoyaiv.com/assets/img/blog/Adding-Mixamo-Animations-to-Unreal-Rigs/title.jpg" /></entry></feed>